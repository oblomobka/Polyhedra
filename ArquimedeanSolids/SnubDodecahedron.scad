// Snub Dodecahedron
// (C) @oblomobka - 2024.09
// GPL license
//
// Data from    http://dmccooey.com/polyhedra/LsnubDodecahedron.txt
//              http://dmccooey.com/polyhedra/RsnubDodecahedron.txt
//              Copyright Â© 2015 David I. McCooey.

/* **CUSTOMIZER VARIABLES** */
// Edge
edge = 30; // [10:100]
// Center of the solid or stand over a face
position = "Center"; // ["Center", "Face"]
// Chiral
chiral = "Dextro"; //["Laevo", "Dextro"]


/* **MODULES** */
// Created with tribonacci constant
module SnubDodecahedron ( edge = 20, position = "Face", chiral = "Laevo"){ //sD -> Conway notation 

    // Constants
    phi = (1+sqrt(5))/2; // Golden ratio = 1,618...
    psi = ((phi + sqrt(phi-5/27))/2)^(1/3) + ((phi - sqrt(phi-5/27))/2)^(1/3); // 1.71556
    //tri = (1+(19-3*sqrt(33))^(1/3)+(19+3*sqrt(33))^(1/3))/3;  // Tribonacci constant = 1,839...
   
    // Invariants
    //rCirSnubCube = sqrt((1+1/tri^2)+tri^2); 
   
    // Variables
    C0  = phi * sqrt(3 - (psi^2)) / 2;
    C1  = psi * phi * sqrt(3 - (psi^2)) / 2;
    C2  = phi * sqrt((psi - 1 - (1/psi)) * phi) / 2;
    C3  = (psi^2) * phi * sqrt(3 - (psi^2)) / 2;
    C4  = psi * phi * sqrt((psi - 1 - (1/psi)) * phi) / 2;
    C5  = phi * sqrt(1 - psi + (1 + phi) / psi) / 2;
    C6  = phi * sqrt(psi + 1 - phi) / 2;
    C7  = (psi^2) * phi * sqrt((psi - 1 - (1/psi)) * phi) / 2;
    C8  = psi * phi * sqrt(1 - psi + (1 + phi) / psi) / 2;
    C9  = sqrt((psi + 2) * phi + 2) / 2;
    C10 = psi * sqrt(psi * (1 + phi) - phi) / 2;
    C11 = sqrt((psi^2) * (1 + 2 * phi) - phi) / 2;
    C12 = phi * sqrt((psi^2) + psi) / 2;
    C13 = (phi^2) * sqrt(psi * (psi + phi) + 1) / (2 * psi);
    C14 = phi * sqrt(psi * (psi + phi) + 1) / 2;
    
    // Definition of points and faces V = 60 / F = 92 ( 80 triangles + 12 pentagons )
    sDpoints=[
        [  C2,  -C1,  C14],
        [  C2,  +C1, -C14],
        [ -C2,  +C1,  C14],
        [ -C2,  -C1, -C14],
        [ C14,  -C2,   C1],
        [ C14,  +C2,  -C1],
        [-C14,  +C2,   C1],
        [-C14,  -C2,  -C1],
        [  C1, -C14,   C2],
        [  C1, +C14,  -C2],
        [ -C1, +C14,   C2],
        [ -C1, -C14,  -C2],
        [  C3,  +C4,  C13],
        [  C3,  -C4, -C13],
        [ -C3,  -C4,  C13],
        [ -C3,  +C4, -C13],
        [ C13,  +C3,   C4],
        [ C13,  -C3,  -C4],
        [-C13,  -C3,   C4],
        [-C13,  +C3,  -C4],
        [  C4, +C13,   C3],
        [  C4, -C13,  -C3],
        [ -C4, -C13,   C3],
        [ -C4, +C13,  -C3],
        [  C0,  -C8,  C12],
        [  C0,  +C8, -C12],
        [ -C0,  +C8,  C12],
        [ -C0,  -C8, -C12],
        [ C12,  -C0,   C8],
        [ C12,  +C0,  -C8],
        [-C12,  +C0,   C8],
        [-C12,  -C0,  -C8],
        [  C8, -C12,   C0],
        [  C8, +C12,  -C0],
        [ -C8, +C12,   C0],
        [ -C8, -C12,  -C0],
        [  C7,  -C6,  C11],
        [  C7,  +C6, -C11],
        [ -C7,  +C6,  C11],
        [ -C7,  -C6, -C11],
        [ C11,  -C7,   C6],
        [ C11,  +C7,  -C6],
        [-C11,  +C7,   C6],
        [-C11,  -C7,  -C6],
        [  C6, -C11,   C7],
        [  C6, +C11,  -C7],
        [ -C6, +C11,   C7],
        [ -C6, -C11,  -C7],
        [  C9,  +C5,  C10],
        [  C9,  -C5, -C10],
        [ -C9,  -C5,  C10],
        [ -C9,  +C5, -C10],
        [ C10,  +C9,   C5],
        [ C10,  -C9,  -C5],
        [-C10,  -C9,   C5],
        [-C10,  +C9,  -C5],
        [  C5, +C10,   C9],
        [  C5, -C10,  -C9],
        [ -C5, -C10,   C9],
        [ -C5, +C10,  -C9],
  
        [  C2,   C1,  C14],
        [  C2,  -C1, -C14],
        [ -C2,  -C1,  C14],
        [ -C2,   C1, -C14],
        [ C14,   C2,   C1],
        [ C14,  -C2,  -C1],
        [-C14,  -C2,   C1],
        [-C14,   C2,  -C1],
        [  C1,  C14,   C2],
        [  C1, -C14,  -C2],
        [ -C1, -C14,   C2],
        [ -C1,  C14,  -C2],
        [  C3,  -C4,  C13],
        [  C3,   C4, -C13],
        [ -C3,   C4,  C13],
        [ -C3,  -C4, -C13],
        [ C13,  -C3,   C4],
        [ C13,   C3,  -C4],
        [-C13,   C3,   C4],
        [-C13,  -C3,  -C4],
        [  C4, -C13,   C3],
        [  C4,  C13,  -C3],
        [ -C4,  C13,   C3],
        [ -C4, -C13,  -C3],
        [  C0,   C8,  C12],
        [  C0,  -C8, -C12],
        [ -C0,  -C8,  C12],
        [ -C0,   C8, -C12],
        [ C12,   C0,   C8],
        [ C12,  -C0,  -C8],
        [-C12,  -C0,   C8],
        [-C12,   C0,  -C8],
        [  C8,  C12,   C0],
        [  C8, -C12,  -C0],
        [ -C8, -C12,   C0],
        [ -C8,  C12,  -C0],
        [  C7,   C6,  C11],
        [  C7,  -C6, -C11],
        [ -C7,  -C6,  C11],
        [ -C7,   C6, -C11],
        [ C11,   C7,   C6],
        [ C11,  -C7,  -C6],
        [-C11,  -C7,   C6],
        [-C11,   C7,  -C6],
        [  C6,  C11,   C7],
        [  C6, -C11,  -C7],
        [ -C6, -C11,   C7],
        [ -C6,  C11,  -C7],
        [  C9,  -C5,  C10],
        [  C9,   C5, -C10],
        [ -C9,   C5,  C10],
        [ -C9,  -C5, -C10],
        [ C10,  -C9,   C5],
        [ C10,   C9,  -C5],
        [-C10,   C9,   C5],
        [-C10,  -C9,  -C5],
        [  C5, -C10,   C9],
        [  C5,  C10,  -C9],
        [ -C5,  C10,   C9],
        [ -C5, -C10,  -C9]      
        
    ];

sDfaceslaevo = [
    [  0, 12, 48, 28, 36 ],
    [  1, 13, 49, 29, 37 ],
    [  2, 14, 50, 30, 38 ],
    [  3, 15, 51, 31, 39 ],
    [  4, 17, 53, 32, 40 ],
    [  5, 16, 52, 33, 41 ],
    [  6, 19, 55, 34, 42 ],
    [  7, 18, 54, 35, 43 ],
    [  8, 22, 58, 24, 44 ],
    [  9, 23, 59, 25, 45 ],
    [ 10, 20, 56, 26, 46 ],
    [ 11, 21, 57, 27, 47 ],
    [  0, 14,  2 ],
    [  1, 15,  3 ],
    [  2, 12,  0 ],
    [  3, 13,  1 ],
    [  4, 16,  5 ],
    [  5, 17,  4 ],
    [  6, 18,  7 ],
    [  7, 19,  6 ],
    [  8, 21, 11 ],
    [  9, 20, 10 ],
    [ 10, 23,  9 ],
    [ 11, 22,  8 ],
    [ 12, 56, 48 ],
    [ 13, 57, 49 ],
    [ 14, 58, 50 ],
    [ 15, 59, 51 ],
    [ 16, 48, 52 ],
    [ 17, 49, 53 ],
    [ 18, 50, 54 ],
    [ 19, 51, 55 ],
    [ 20, 52, 56 ],
    [ 21, 53, 57 ],
    [ 22, 54, 58 ],
    [ 23, 55, 59 ],
    [ 24, 36, 44 ],
    [ 25, 37, 45 ],
    [ 26, 38, 46 ],
    [ 27, 39, 47 ],
    [ 28, 40, 36 ],
    [ 29, 41, 37 ],
    [ 30, 42, 38 ],
    [ 31, 43, 39 ],
    [ 32, 44, 40 ],
    [ 33, 45, 41 ],
    [ 34, 46, 42 ],
    [ 35, 47, 43 ],
    [ 36, 24,  0 ],
    [ 37, 25,  1 ],
    [ 38, 26,  2 ],
    [ 39, 27,  3 ],
    [ 40, 28,  4 ],
    [ 41, 29,  5 ],
    [ 42, 30,  6 ],
    [ 43, 31,  7 ],
    [ 44, 32,  8 ],
    [ 45, 33,  9 ],
    [ 46, 34, 10 ],
    [ 47, 35, 11 ],
    [ 48, 16, 28 ],
    [ 49, 17, 29 ],
    [ 50, 18, 30 ],
    [ 51, 19, 31 ],
    [ 52, 20, 33 ],
    [ 53, 21, 32 ],
    [ 54, 22, 35 ],
    [ 55, 23, 34 ],
    [ 56, 12, 26 ],
    [ 57, 13, 27 ],
    [ 58, 14, 24 ],
    [ 59, 15, 25 ],
    [ 24, 14,  0 ],
    [ 25, 15,  1 ],
    [ 26, 12,  2 ],
    [ 27, 13,  3 ],
    [ 28, 16,  4 ],
    [ 29, 17,  5 ],
    [ 30, 18,  6 ],
    [ 31, 19,  7 ],
    [ 32, 21,  8 ],
    [ 33, 20,  9 ],
    [ 34, 23, 10 ],
    [ 35, 22, 11 ],
    [ 36, 40, 44 ],
    [ 37, 41, 45 ],
    [ 38, 42, 46 ],
    [ 39, 43, 47 ],
    [ 48, 56, 52 ],
    [ 49, 57, 53 ],
    [ 50, 58, 54 ],
    [ 51, 59, 55 ]
];

sDfacesdextro = [
    [ 60, 96, 88,108, 72 ],
    [ 61, 97, 89, 109, 73 ],
    [ 62, 98, 90, 110, 74 ],
    [ 63, 99, 91, 111, 75 ],
    [ 64, 100, 92, 113, 77 ],
    [ 65, 101, 93, 112, 76 ],
    [ 66, 102, 94, 115, 79 ],
    [ 67, 103, 95, 114, 78 ],
    [ 68, 104, 84, 118, 82 ],
    [ 69, 105, 85, 119, 83 ],
    [ 70, 106, 86, 116, 80 ],
    [ 71, 107, 87, 117, 81 ],
    [ 60, 62, 74 ],
    [ 61, 63, 75 ],
    [ 62, 60, 72 ],
    [ 63, 61, 73 ],
    [ 64, 65, 76 ],
    [ 65, 64, 77 ],
    [ 66, 67, 78 ],
    [ 67, 66, 79 ],
    [ 68, 71, 81 ],
    [ 69, 70, 80 ],
    [ 70, 69, 83 ],
    [ 71, 68, 82 ],
    [ 72, 108, 116 ],
    [ 73, 109, 117 ],
    [ 74, 110, 118 ],
    [ 75, 111, 119 ],
    [ 76, 112, 108 ],
    [ 77, 113, 109 ],
    [ 78, 114, 110 ],
    [ 79, 115, 111 ],
    [ 80, 116, 112 ],
    [ 81, 117, 113 ],
    [ 82, 118, 114 ],
    [ 83, 119, 115 ],
    [ 84, 104, 96 ],
    [ 85, 105, 97 ],
    [ 86, 106, 98 ],
    [ 87, 107, 99 ],
    [ 88, 96, 100 ],
    [ 89, 97, 101 ],
    [ 90, 98, 102 ],
    [ 91, 99, 103 ],
    [ 92, 100, 104 ],
    [ 93, 101, 105 ],
    [ 94, 102, 106 ],
    [ 95, 103, 107 ],
    [ 96, 60, 84 ],
    [ 97, 61, 85 ],
    [ 98, 62, 86 ],
    [ 99, 63, 87 ],
    [ 100, 64, 88 ],
    [ 101, 65, 89 ],
    [ 102, 66, 90 ],
    [ 103, 67, 91 ],
    [ 104, 68, 92 ],
    [ 105, 69, 93 ],
    [ 106, 70, 94 ],
    [ 107, 71, 95 ],
    [ 108, 88, 76 ],
    [ 109, 89, 77 ],
    [ 110, 90, 78 ],
    [ 111, 91, 79 ],
    [ 112, 93, 80 ],
    [ 113, 92, 81 ],
    [ 114, 95, 82 ],
    [ 115, 94, 83 ],
    [ 116, 86, 72 ],
    [ 117, 87, 73 ],
    [ 118, 84, 74 ],
    [ 119, 85, 75 ],
    [ 84, 60, 74 ],
    [ 85, 61, 75 ],
    [ 86, 62, 72 ],
    [ 87, 63, 73 ],
    [ 88, 64, 76 ],
    [ 89, 65, 77 ],
    [ 90, 66, 78 ],
    [ 91, 67, 79 ],
    [ 92, 68, 81 ],
    [ 93, 69, 80 ],
    [ 94, 70, 83 ],
    [ 95, 71, 82 ],
    [ 96, 104, 100 ],
    [ 97, 105, 101 ],
    [ 98, 106, 102 ],
    [ 99, 107, 103 ],
    [ 108, 112, 116 ],
    [ 109, 113, 117 ],
    [ 110, 114, 118 ],
    [ 111, 115, 119 ]
];

    if ( chiral == "Laevo"){
                scale ([ edge, edge, edge])
                    polyhedron ( sDpoints, sDfaceslaevo);}

    else if ( chiral == "Dextro") {
                scale ([ edge, edge, edge])
                    polyhedron ( sDpoints, sDfacesdextro);       
        }
    
    echo (psi);

}

/* **RENDERING OF SOLIDS** */
SnubDodecahedron ( edge = edge, position = position, chiral = chiral);
//SnubDodecahedron ( edge = edge, position = position, chiral = "Dextro");
